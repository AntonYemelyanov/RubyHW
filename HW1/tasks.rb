# frozen_string_literal: true

# p 'Дан целочисленный массив. Найти количество четных элементов.'
# p "[1,2,3].some_method"
# p [1,2,3].some_method
# p '--------------'
#
# 1. строка с заданием
# 2.строка с условием (чтобы мы могли понять исходные данные)
# 3.строка вывода результата решения
# 4.разделительная строка для задач

puts '1.Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
puts 'mas = [ "a", "b", "c","d","2","3","4","5" ]'
mas1 = %w[a b c d 2 3 4 5]
mas1.each_index { |x| print mas1[x] if x.even? }
mas1.each_index { |x| print mas1[x] if x.odd? }
puts ''
puts '--------------------------------------------------------'

puts '2.Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
puts 'mas = [ "a", "b", "c","d","2","3","4","5" ]'
mas2 = %w[a b c d 2 3 4 5]
mas2.each_index { |x| print mas2[x] if x.odd? }
mas2.each_index { |x| print mas2[x] if x.even? }
puts ''
puts '--------------------------------------------------------'

puts '3.Дан целочисленный массив. Вывести номер первого из тех его элементов,
#которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1].
#Если таких элементов нет, то вывести [ ].'
puts "mas3 = ['2', '8', '5', '5', '8']"

mas3 = ['2', '8', '5', '5', '8']

def task3(arr)
  a = arr[0]
  b = arr[-1]
  f = 0
  arr.length.times do |i|
    x = arr[i]
    if a < x && x < b
      puts arr.index(x)
      f = f+1
      break
    end
  end
  print "[]" if f.zero?
end
task3(mas3)
puts "-------------------------------------------------------------------------"

puts '4.НЕ РЕШЕНА!Дан целочисленный массив. Вывести номер последнего из тех его элементов,
которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1].
Если таких элементов нет, то вывести [ ].'
puts "mas4 = ['2', '5', '5', '5', '7']"

mas4 = ['2', '5', '5', '5', '7']
def task4(arr)
  a = arr[0]
  b = arr[-1]
  f = 0
  ind = 0
  arr.length.times do |i|
    x = arr[i]
    if a < x && x < b
      f = f+1
      ind = arr.index(x)
    end
  end
  puts f
  puts ind
  print "[]" if f.zero?
end
task4(mas4)
puts'-----------------------------------------------------------------'

p'5. Дан целочисленный массив. Упорядочить его по возрастанию.'
p "mas5 = ['2', '8', '9', '5', '7']"
p "#{%w[2 8 9 5 7].sort!}."
puts'-----------------------------------------------------------------'

p'6. Дан целочисленный массив. Упорядочить его по убыванию.'
p "mas6 = ['2', '8', '9', '5', '7']"
p "#{%w[2 8 9 5 7].sort!{ |a, b| b <=>a }}."
puts'-----------------------------------------------------------------'

p '7. НЕ РАБОТАЕТ. РАЗОБРАТЬСЯ  Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый
элемент. Первый и последний элементы массива не изменять.	'
p "mas7 = ['2', '8', '9', '5', '7']"
mas7 = ['1', '2', '3', '4', '5']
def task7(arr)
  tempAr = [] << arr[0]
  a = arr[0]
  lastIndex = arr.length - 1
  arr.length.times do |i|
    x = i
    if x % 2 == 0 && x != lastIndex && x != 0
      z = arr[i] + a
      tempAr.push(z)
    end
  end
  tempAr << arr[-1]
  return tempAr
end
p"#{task7(mas7)}"
puts "-------------------------------------------------------------------------"

p "8 Дано целое число. Найти сумму его цифр."
int8 = 12345
def sum(num)
  num.to_s.split('').map(&:to_i).reduce(:+)
end

p"#{sum(int8)}"

puts "-------------------------------------------------------------------------"

p "9 Дан целочисленный массив. Найти индекс максимального элемента."
p "mas9 = ['2', '8', '9', '5', '7']"
mas9 = ['2', '8', '9', '5', '7']
def task9(arr)
  max_value = 0
  max_index = nil
  arr.each_with_index do |v, i|
    if v.to_i > max_value
      max_value = v.to_i
      max_index = i
    end
  end
  puts max_index
end
task9(mas9)
puts "-------------------------------------------------------------------------"

p "10 Дан целочисленный массив. Найти индекс минимального элемента."
p "mas10 = ['2', '8', '1', '5', '7']"
mas10 = ['2', '8', '1', '4', '7']
def task10(arr)
  min_value = arr[0].to_i
  min_index = 0
  arr.each_with_index do |v, i|
    if v.to_i < min_value
      min_value = v.to_i
      min_index = i
    end
  end
  puts min_index
end
task10(mas10)
puts "-------------------------------------------------------------------------"

p "11 Дан целочисленный массив. Найти индекс первого минимального элемента. (копипаст задачи 10, так как полностью удовлетворяет условию)"
p "mas11 = ['2', '8', '1', '1', '7']"
mas11 = ['2', '8', '1', '1', '7']
def task11(arr)
  min_value = arr[0].to_i
  min_index = 0
  arr.each_with_index do |v, i|
    if v.to_i < min_value
      min_value = v.to_i
      min_index = i
    end
  end
  puts min_index
end
task11(mas11)
puts "-------------------------------------------------------------------------"


p "12 Дан целочисленный массив. Найти индекс первого максимального элемента.(копипаст задачи 9, так как полностью удовлетворяет условию)"
p "mas12 = ['2', '9', '6', '9', '7']"
mas12 = ['2', '9', '6', '9', '7']
def task12(arr)
  max_value = 0
  max_index = nil
  arr.each_with_index do |v, i|
    if v.to_i > max_value
      max_value = v.to_i
      max_index = i
    end
  end
  puts max_index
end
task12(mas12)
puts "-------------------------------------------------------------------------"

=begin p "13 НЕ РЕШЕНО Дан целочисленный массив. Найти количество минимальных элементов."
p "mas13 = ['2', '9', '1', '1', '7']"
mas13 = ['2', '9', '1', '1', '7']
def task13(arr)
  max_value_int = arr[0].to_s
  count = nil
  arr.each_with_index do |v, i|
    if v.to_i < max_value_int
      max_value_int = v.to_i
    end
  end
  arr2 = []
  arr2 << arr.map.with_index{ |k, i| i if k == max_value_int}.compact
  puts arr2.length

end
task13(mas13)
=end

p "14 Дан целочисленный массив. Найти количество четных элементов."
p "mas14 = ['2', '9', '1', '1', '7']"

mas14 = ['2', '9', '2', '6', '7']
def task14(arr)
  count = 0
    arr.each do |x|
      if x.to_i.even?
        count = count+1
      end
    end
  puts count.to_s
end
task14(mas14)
puts "-------------------------------------------------------------------------"



    p "15 Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию."
p "mas15 = ['2', '9', '1', '1', '7']"

mas15 = ['2', '9', '1', '1', '7']
def task15(arr)
  arr.unshift(arr.pop)
end
puts task15(mas15)
puts "-------------------------------------------------------------------------"


p "16 Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию."
mas16 = ['2', '9', '1', '1', '7']

def task16(m)
  m[1..-1] + [m[0]]
end
puts task16(mas16)

p "17 Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют убывающую последовательность."
p "mas17 = ['2', '9', '1', '1', '7']"
mas17 = ['2', '9', '1', '1', '7']
def task17(m)
  p (0...m.size).sort_by{ |i| m[i] }.reverse
end
task17(mas17)

p "18 Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют возрастающую  последовательность."
p "mas18 = ['2', '9', '1', '1', '7']"
mas18 = ['2', '9', '1', '1', '7']
def task18(m)
  p (0...m.size).sort_by{ |i| m[i] }
end
task18(mas18)
puts "-------------------------------------------------------------------------"

p "19 Дан целочисленный массив. Найти максимальный четный элемент."
"p mas19 = [2,9,9,1,6,3,7]"
mas19 = [2,9,9,1,6,3,7]
def task19(arr)
  p arr.select {|n| n.even?}.max

end
task19(mas19)

puts "-------------------------------------------------------------------------"


p "21 Дан целочисленный массив. Найти количество минимальных элементов."
p "arr21 = ['2', '9', '1', '1', '7']"
arr21 = ['1', '9', '1', '1', '7']
p arr21.select{|e| e==arr21.min}.size


p "22 Дан целочисленный массив. Найти количество максимальных элементов."
p "arr22 = ['2', '9', '1', '1', '7']"
arr22 = ['1', '9', '1', '1', '7']
p arr22.select{|e| e==arr22.max}.size

p "23 Дан целочисленный массив. Найти количество элементов, между первым и последним минимальным."
p "array = [4, 3, 7, 5, 3, 6, 7]"
array = [4, 3, 7, 5, 3, 6, 7]
max_value_int = array.min
first_max = array.index(max_value_int)
last_max = array.rindex(max_value_int)
p array[first_max, last_max].count -2
p "-------------------------------------------------------------------------"

p "24 Дан целочисленный массив. Найти количество элементов, между первым и последним максимальным."
p "array = [4, 3, 7, 5, 3, 6, 7]"
array = [4, 3, 7, 5, 3, 6, 7]
max_value_int = array.max
first_max = array.index(max_value_int)
last_max = array.rindex(max_value_int)
p array[first_max+1 ... last_max].size
p "-------------------------------------------------------------------------"


p "25 Дано целое число. Найти произведение его цифр.."
int25 = 12345
def sum(num)
  num.to_s.split('').map(&:to_i).reduce(:*)
end

p"#{sum(int25)}"

p "-------------------------------------------------------------------------"